[["snow-data-example.html", "Chapter 2 Snow Data Example 2.1 Reading an html 2.2 Data Download 2.3 Data read-in 2.4 Extracting the meteorological data URLs 2.5 Download the meteorological data. 2.6 Custom function writing 2.7 Summary of meteorlogical files 2.8 Monthy average temperature plot 2.9 Average daily precipitation", " Chapter 2 Snow Data Example In this assignment, I explored web scraping, different functions and iterations by using a data set from the Center for Snow and Avalanche Studies Website and read a table in. This table contains links to data I want and to programatically download for three sites. I don’t know much about these sites, but they contain incredibly rich snow, temperature, and precip data. 2.1 Reading an html 2.1.1 Extract CSV links from webpage site_url &lt;- &#39;https://snowstudies.org/archived-data/&#39; #Read the web url webpage &lt;- read_html(site_url) #See if we can extract tables and get the data that way tables &lt;- webpage %&gt;% html_nodes(&#39;table&#39;) %&gt;% magrittr::extract2(3) %&gt;% html_table(fill = TRUE) #That didn&#39;t work, so let&#39;s try a different approach #Extract only weblinks and then the URLs! links &lt;- webpage %&gt;% html_nodes(&#39;a&#39;) %&gt;% .[grepl(&#39;24hr&#39;,.)] %&gt;% html_attr(&#39;href&#39;) 2.2 Data Download 2.2.1 Download data in a for loop #Grab only the name of the file by splitting out on forward slashes splits &lt;- str_split_fixed(links,&#39;/&#39;,8) #Keep only the 8th column dataset &lt;- splits[,8] #generate a file list for where the data goes file_names &lt;- paste0(&#39;data&#39;,dataset) for(i in 1:3){ download.file(links[i],destfile=file_names[i]) } downloaded &lt;- file.exists(file_names) evaluate &lt;- !all(downloaded) 2.2.2 Download data in a map #Map version of the same for loop (downloading 3 files) if(evaluate == T){ map2(links[1:3],file_names[1:3],download.file) }else{print(&#39;data already downloaded&#39;)} ## [[1]] ## [1] 0 ## ## [[2]] ## [1] 0 ## ## [[3]] ## [1] 0 2.3 Data read-in 2.3.1 Read in just the snow data as a loop #Pattern matching to only keep certain files snow_files &lt;- file_names %&gt;% .[!grepl(&#39;SG_24&#39;,.)] %&gt;% .[!grepl(&#39;PTSP&#39;,.)] empty_data &lt;- list() snow_data &lt;- for(i in 1:length(snow_files)){ empty_data[[i]] &lt;- read_csv(snow_files[i]) %&gt;% select(Year,DOY,Sno_Height_M) } ## Rows: 6211 Columns: 52 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## dbl (52): ArrayID, Year, DOY, Hour, LoAir_Min_C, LoAir_Min_Time, LoAir_Max_C... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Rows: 6575 Columns: 48 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## dbl (48): ArrayID, Year, DOY, Hour, LoAir_Min_C, LoAir_Min_Time, LoAir_Max_C... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. snow_data_full &lt;- do.call(&#39;rbind&#39;,empty_data) summary(snow_data_full) ## Year DOY Sno_Height_M ## Min. :2003 Min. : 1.0 Min. :-3.523 ## 1st Qu.:2008 1st Qu.: 92.0 1st Qu.: 0.350 ## Median :2012 Median :183.0 Median : 0.978 ## Mean :2012 Mean :183.1 Mean : 0.981 ## 3rd Qu.:2016 3rd Qu.:274.0 3rd Qu.: 1.520 ## Max. :2021 Max. :366.0 Max. : 2.905 ## NA&#39;s :4554 2.3.2 Read in the data as a map function #making the data as a map function our_snow_reader &lt;- function(file){ name = str_split_fixed(file,&#39;/&#39;,2)[,2] %&gt;% gsub(&#39;_24hr.csv&#39;,&#39;&#39;,.) df &lt;- read_csv(file) %&gt;% select(Year,DOY,Sno_Height_M) %&gt;% mutate(site = name) } #creating an object with the functions snow_data_full &lt;- map_dfr(snow_files,our_snow_reader) ## Rows: 6211 Columns: 52 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## dbl (52): ArrayID, Year, DOY, Hour, LoAir_Min_C, LoAir_Min_Time, LoAir_Max_C... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Rows: 6575 Columns: 48 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## dbl (48): ArrayID, Year, DOY, Hour, LoAir_Min_C, LoAir_Min_Time, LoAir_Max_C... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. summary(snow_data_full) ## Year DOY Sno_Height_M site ## Min. :2003 Min. : 1.0 Min. :-3.523 Length:12786 ## 1st Qu.:2008 1st Qu.: 92.0 1st Qu.: 0.350 Class :character ## Median :2012 Median :183.0 Median : 0.978 Mode :character ## Mean :2012 Mean :183.1 Mean : 0.981 ## 3rd Qu.:2016 3rd Qu.:274.0 3rd Qu.: 1.520 ## Max. :2021 Max. :366.0 Max. : 2.905 ## NA&#39;s :4554 2.3.3 Plot snow data #making an object for the yearly snow data points snow_yearly &lt;- snow_data_full %&gt;% group_by(Year,site) %&gt;% summarize(mean_height = mean(Sno_Height_M,na.rm=T)) ## `summarise()` has grouped output by &#39;Year&#39;. You can override using the `.groups` argument. #plotting the yearly snow data ggplot(snow_yearly,aes(x=Year,y=mean_height,color=site)) + geom_point() + ggthemes::theme_few() + ggthemes::scale_color_few()+ labs(x=&quot;Mean Height&quot;, y=&quot;Year&quot;, title=&quot;Yearly Snow Data&quot;) 2.4 Extracting the meteorological data URLs I used the rvest package to get the URLs for the SASP forcing and SBSP_forcing meteorological datasets. #creating values for the meteorological data URLs links_hw &lt;- webpage %&gt;% html_nodes(&#39;a&#39;) %&gt;% .[grepl(&#39;forcing&#39;,.)] %&gt;% html_attr(&#39;href&#39;) links_hw ## [1] &quot;https://snowstudies.org/wp-content/uploads/2022/02/SBB_SASP_Forcing_Data.txt&quot; ## [2] &quot;https://snowstudies.org/wp-content/uploads/2022/02/SBB_SBSP_Forcing_Data.txt&quot; 2.5 Download the meteorological data. Next, I used the download_file and str_split_fixed commands, along with a for loop, to download the data and saved it in our data folder. # grab only the name of the file by splitting out on forward slashes splits_hw &lt;- str_split_fixed(links_hw, &#39;/&#39;, 8) forcingdataset &lt;- splits_hw[,8] %&gt;% gsub(&#39;.txt&#39;,&#39;&#39;,.) file_names_hw &lt;- paste0(&#39;data/&#39;, forcingdataset) # creating a for loop for(i in 1:length(file_names_hw)){ download.file(links_hw[i], destfile=file_names_hw[i]) } file_names_hw ## [1] &quot;data/SBB_SASP_Forcing_Data&quot; &quot;data/SBB_SBSP_Forcing_Data&quot; 2.6 Custom function writing I wrote a custom function in order to read in the data and append a site column to the data. # this code grabs the variable names from the metadata pdf file library(pdftools) ## Using poppler version 20.12.1 q3_headers &lt;- pdf_text(&#39;https://snowstudies.org/wp-content/uploads/2022/02/Serially-Complete-Metadata-text08.pdf&#39;) %&gt;% readr::read_lines(.) %&gt;% trimws(.) %&gt;% str_split_fixed(.,&#39;\\\\.&#39;,2) %&gt;% .[,2] %&gt;% .[1:26] %&gt;% str_trim(side = &quot;left&quot;) q3_headers ## [1] &quot;year&quot; ## [2] &quot;month&quot; ## [3] &quot;day&quot; ## [4] &quot;hour&quot; ## [5] &quot;minute&quot; ## [6] &quot;second&quot; ## [7] &quot;precip [kg m-2 s-1]&quot; ## [8] &quot;sw down [W m-2]&quot; ## [9] &quot;lw down [W m-2]&quot; ## [10] &quot;air temp [K]&quot; ## [11] &quot;windspeed [m s-1]&quot; ## [12] &quot;relative humidity [%]&quot; ## [13] &quot;pressure [Pa]&quot; ## [14] &quot;specific humidity [g g-1]&quot; ## [15] &quot;calculated dewpoint temperature [K]&quot; ## [16] &quot;precip, WMO-corrected [kg m-2 s-1]&quot; ## [17] &quot;air temp, corrected with Kent et al. (1993) [K]&quot; ## [18] &quot;air temp, corrected with Anderson and Baumgartner (1998)[K]&quot; ## [19] &quot;air temp, corrected with Nakamura and Mahrt (2005) [K]&quot; ## [20] &quot;air temp, corrected with Huwald et al. (2009) [K]&quot; ## [21] &quot;qc code precip&quot; ## [22] &quot;qc code sw down&quot; ## [23] &quot;qc code lw down&quot; ## [24] &quot;qc code air temp&quot; ## [25] &quot;qc code wind speed&quot; ## [26] &quot;qc code relhum&quot; #creating a function q3_reader &lt;- function(file){ name = str_split_fixed(file, &#39;/&#39;, 2)[,2] name2 = str_split_fixed(file, &#39;_&#39;, 4)[,2] q3test = read.delim(file, header = FALSE, sep =&quot;&quot;, col.names = q3_headers, skip = 4) %&gt;% select(1:14) %&gt;% mutate(site=name2) } 2.7 Summary of meteorlogical files I used the map function to read in both meteorological files and then displayed a summary of my tibble. #reading in the forcing data forcing_data_full &lt;- map_dfr(file_names_hw, q3_reader) summary(forcing_data_full) ## year month day hour minute ## Min. :2003 Min. : 1.000 Min. : 1.00 Min. : 0.00 Min. :0 ## 1st Qu.:2005 1st Qu.: 3.000 1st Qu.: 8.00 1st Qu.: 5.75 1st Qu.:0 ## Median :2007 Median : 6.000 Median :16.00 Median :11.50 Median :0 ## Mean :2007 Mean : 6.472 Mean :15.76 Mean :11.50 Mean :0 ## 3rd Qu.:2009 3rd Qu.: 9.000 3rd Qu.:23.00 3rd Qu.:17.25 3rd Qu.:0 ## Max. :2011 Max. :12.000 Max. :31.00 Max. :23.00 Max. :0 ## second precip..kg.m.2.s.1. sw.down..W.m.2. lw.down..W.m.2. ## Min. :0 Min. :0.000e+00 Min. :-9999.000 Min. :-9999.0 ## 1st Qu.:0 1st Qu.:0.000e+00 1st Qu.: -3.510 1st Qu.: 173.4 ## Median :0 Median :0.000e+00 Median : -0.344 Median : 231.4 ## Mean :0 Mean :3.838e-05 Mean :-1351.008 Mean :-1325.7 ## 3rd Qu.:0 3rd Qu.:0.000e+00 3rd Qu.: 294.900 3rd Qu.: 272.2 ## Max. :0 Max. :6.111e-03 Max. : 1341.000 Max. : 365.8 ## air.temp..K. windspeed..m.s.1. relative.humidity.... pressure..Pa. ## Min. :242.1 Min. :-9999.000 Min. : 0.011 Min. :63931 ## 1st Qu.:265.8 1st Qu.: 0.852 1st Qu.: 37.580 1st Qu.:63931 ## Median :272.6 Median : 1.548 Median : 59.910 Median :65397 ## Mean :272.6 Mean : -790.054 Mean : 58.891 Mean :65397 ## 3rd Qu.:279.7 3rd Qu.: 3.087 3rd Qu.: 81.600 3rd Qu.:66863 ## Max. :295.8 Max. : 317.300 Max. :324.800 Max. :66863 ## specific.humidity..g.g.1. site ## Min. :0.000000 Length:138336 ## 1st Qu.:0.001744 Class :character ## Median :0.002838 Mode :character ## Mean :0.003372 ## 3rd Qu.:0.004508 ## Max. :0.014780 ##Average yearly temperature I made a line plot of mean temp by year by site (using the air temp [K] variable). What is suspicious about this data is temperature variation at the beginning of the graph, especially since the temperature is in Kelvin. This eludes that temperature was most likely not collected in the earlier years. #creating an object to plot, grabbing the mean temperature by year by site q5_yearly &lt;- forcing_data_full %&gt;% group_by(year,site) %&gt;% summarize(mean_temp_k = mean(air.temp..K.,na.rm=T)) ## `summarise()` has grouped output by &#39;year&#39;. You can override using the `.groups` argument. #plotting the mean temperature by year by site ggplot(q5_yearly) + geom_line(aes(x=year,y=mean_temp_k,color=site)) + ggthemes::theme_few() + ggthemes::scale_color_few() What is suspicious about this data is temperature variation at the beginning of the graph, especially since the temperature is in Kelvin. This eludes that temperature was most likely not collected in the earlier years. 2.8 Monthy average temperature plot Here, i wrote a function in order to make line plots of monthly average temperature at each site for a given year. I used a for loop to make these plots for 2005 to 2010. Both sites follow the same trend for each month, however, the SBSP site is never warmer than SASP site. There are times where are almost the same temperature, but SBSP never exceeds SASP. #creating a function for the monthly average temperature forcingmonthyear &lt;- function(forcing_data_full, year){ monthlytemp&lt;-forcing_data_full %&gt;% group_by(month,year,site) %&gt;% summarize(monthly_air_temp = mean(air.temp..K.,na.rm=T)) %&gt;% filter(yr == year) #plotting the function plots &lt;- ggplot(monthlytemp, aes(x = month, y = monthly_air_temp, color = site)) + geom_line(size=2)+ facet_wrap(~year) labs(title= monthlytemp$year, x = &quot;Month&quot;, y = &quot;Temperature (K)&quot;) print(plots) } years &lt;- c(2005,2006,2007,2008,2009,2010) #creating a for loop for (yr in years) { forcingmonthyear(forcing_data_full, year) } ## `summarise()` has grouped output by &#39;month&#39;, &#39;year&#39;. You can override using the `.groups` argument. ## `summarise()` has grouped output by &#39;month&#39;, &#39;year&#39;. You can override using the `.groups` argument. ## `summarise()` has grouped output by &#39;month&#39;, &#39;year&#39;. You can override using the `.groups` argument. ## `summarise()` has grouped output by &#39;month&#39;, &#39;year&#39;. You can override using the `.groups` argument. ## `summarise()` has grouped output by &#39;month&#39;, &#39;year&#39;. You can override using the `.groups` argument. ## `summarise()` has grouped output by &#39;month&#39;, &#39;year&#39;. You can override using the `.groups` argument. 2.9 Average daily precipitation For this graph, I grouped the data by day by site to get the daily temperature. # making an object for daily temperature dailytemp&lt;-forcing_data_full %&gt;% group_by(day,site) %&gt;% summarize(daily_air_temp = mean(air.temp..K.,na.rm=T)) ## `summarise()` has grouped output by &#39;day&#39;. You can override using the `.groups` argument. #plotting bonus ggplot(dailytemp, aes(x=day, y=daily_air_temp, color=site))+ geom_line()+ labs(x=&#39;Day of the Month&#39;, y=&#39;Daily Air Temperature&#39;, title = &quot;Daily Temperature&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
